# We do not recreate user certificates in demo_governance.sh if they already exist
# We do recreate member certificates each time
@user0_id="5ef13a001d17b02062a99f48adddf84aa410670fde21931f0546b7c981de1637"
@user1_id = "7bd24bd11dcc59e552459483db34a0d5bd59b64fc5f0ce788c473a4aa126445a"

@bridge_address="0xBF4961b1b32CA8873e0C760906745F2006878EF0"
@user0_address="0xEDAC9E99e752107c8dE95DAd7cCD8bd0Ae352001"
@user1_address="0xa3df034084078EBf20216b0789CF4901D8D6194E"

###Member0 should fail
POST https://member0.localhost:8000/app/testing
###User0 should succeed
POST https://user0.localhost:8000/app/testing
###User1 should succeed
POST https://user1.localhost:8000/app/testing


###Register securities for user0
PUT https://user0.localhost:8000/app/securities/{{user0_id}}

{ 
    "userId": {{user0_id}}, 
    "holdings": [{"securityId":"SECURITY1","quantity":500},{"securityId":"SECURITY2","quantity":700}]
}

###Register securities for user1
PUT https://user1.localhost:8000/app/securities/{{user1_id}}

{ 
    "userId": {{user1_id}}, 
    "holdings": [{"securityId":"SECURITY4","quantity":500},{"securityId":"SECURITY5","quantity":700}]
}

###Request loan
POST https://user1.localhost:8000/app/loans/{{user1_id}}

{ 
    "userId": {{user1_id}},"securityId":"SECURITY1","quantity":100
}

###Request loan. Too large. Should fail
POST https://user1.localhost:8000/app/loans/{{user1_id}}

{ 
    "userId": {{user1_id}},"securityId":"SECURITY2","quantity":5000
}

###Request loan. Security not registered. Should fail
POST https://user1.localhost:8000/app/loans/{{user1_id}}

{ 
    "userId": {{user1_id}},"securityId":"SECURITY42","quantity":100
}

#At this point user0 will call 
#cbdc.increaseAllowance(address=bridgeAddress, increasedAllowance=fees+initialCollateral)

###Get Pending Transactions
# @name pendingtransactions
GET https://member0.localhost:8000/app/pendingtransactions

# If bridge receives an AWAIT_ALLOWANCE transaction.
# Bridge calls cbdc.allowance(order=ownerAddress, spender=spenderAddress)
# If return from cbdc.allowance > remaining

###Complete AWAIT_ALLOWANCE transaction.
#Variables taken from last pendingTransaction in body of last pendingtransactions request
#Note that addresses and remaining are fixed
@transactionId = {{pendingtransactions.response.body.$.pendingTransactions[-1:].transactionId}}
@originatingLoanId = {{pendingtransactions.response.body.$.pendingTransactions[-1:].originatingLoanId}}
# @name completetransactionawait
POST https://member0.localhost:8000/app/completetransaction

{
      "transactionType": "AWAIT_ALLOWANCE",
      "transactionId": "{{transactionId}}",
      "transactionCreated": 1683271670,
      "originatingLoanId": "{{originatingLoanId}}",
      "ownerAddress": "0xB678AC4F4D06E21EF11E858940333692EC2C80BA",
      "spenderAddress": "0x5A84099345D666F5FC7FE644D0A7B0D2B51D84AD",
      "remaining": 10600
}

###Complete CREATE_HTLC_FOR transaction
# Just make sure the last pendingTransaction returned is CREATE_HTLC_FOR
# $.pendingTransactions[?(@.transactionType=='CREATE_HTLC_FOR')] doesn't work because of https://github.com/json-path/JsonPath/issues/272
@transactionId = {{pendingtransactions.response.body.$.pendingTransactions[-1:].transactionId}}
@originatingLoanId = {{pendingtransactions.response.body.$.pendingTransactions[-1:].originatingLoanId}}
@htlcAddress = 0x7FAAA8D76A374B517E05D78B4387811BE88244ED
# @name completetransactionhtlc
POST https://member0.localhost:8000/app/completetransaction

{
    "transactionType": "CREATE_HTLC_FOR",
      "transactionId": "{{transactionId}}",
      "transactionCreated": 1683274004,
      "originatingLoanId": "{{originatingLoanId}}",
      "senderAddress": "0xB678AC4F4D06E21EF11E858940333692EC2C80BA",
      "receiverAddress": "0xFBCC5EE4EA0AF205EBCB22017A221C0FA5569BAF",
      "hashlock": "fe5e67d39e9ff8284012b1f215db5c78ce36d4f4d13ef528ef7b7a6da9c85118",
      "timelock": 1683360404,
      "amount": 10500,
      "htlcAddress": "{{htlcAddress}}"
}

